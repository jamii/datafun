# Potential examples

1. path(X,Y) ← edge(X,Y)
   path(X,Z) ← edge(X,Y), path(Y,Z)

   1a) how it evaluates in naive Datafun
   1b) why is this bad?
   1c) what you might write in OCaml or Haskell to do this faster manually.
   1d) rewrite OCaml code to expose faster-fix & incremental components
   1e) show what Datafun's φ-transform does to the naive Datafun code

   Show that seminaive evaluation turns this from O(n²?) to O(n) or whatever.

2. Some example which we use to demonstrate connection to Datalog seminaive evaluation. (Sells idea as having more general applicability.)

    2a) Show Datalog version of transitive closure
    2b) how seminaive evaluation of the transitive closure changes the set of known facts over time
    2c) How this corresponds exactly to Datafun version w/ incremental path & faster-fix.

3. Example using functions over relations: Generic transitive closure, & what
   φ-transform does to that.

   3a) Generic transitive closure (see below).
   3b) The φ-transform of it, post-optimisation.
   3c) Explain how this generalizes Datalog's seminaive evaluation.

** Example 3
type pre-φ: □{ℕ × ℕ} → {ℕ × ℕ}
type post-φ: □({ℕ × ℕ} × {ℕ × ℕ}) → {ℕ × ℕ}

φ(λx. let [edge] = x in fix [λpath. edge ∪ edge • path])
= λx dx.
  let [edge, dedge] = x in
  φ(fix [λpath. edge ∪ edge • path])
= λ[edge, dedge] _. fastfix φ[λpath. edge ∪ edge • path]
= λ[edge, dedge] _.
  fastfix (φ(λpath. edge ∪ edge • path),
           δ(λpath. edge ∪ edge • path))
= λ[edge, dedge] _.
  fastfix (λpath. edge ∪ φ(edge • path),
           λpath dpath. δedge ∪ δ(edge • path))
= λ[edge, dedge] _.
  fastfix (λpath. edge ∪ φ(edge • path),
           λpath dpath. dedge ∪ δ(edge • path))
(with optimizations)
= λ[edge, _] _.
  fastfix ((λpath. edge ∪ φ(edge • path)),
           (λpath dpath. edge • dpath))

fastfix : □((A -> A) × (A × ΔA → ΔA)) → A
fastfix (f,df) = loop ⊥ (f ⊥)
  where loop x dx = if dx ≤ x then x else
                    loop (x ∪ dx) (df x dx)

δ(edge • path)
= δ{(x,z) | (x,y) ∈ edge, (y,z) ∈ path}
= δ(for (x,y ∈ edge) for (y2,z ∈ path) when (y = y2) {(x,z)})
= (for (x,y ∈ dedge)
   let ... in for (y2,z ∈ path) let ... in when (y = y2) {(x,z)})
∪ for (x,y ∈ edge ∪ dedge) let ... in
  δ(for (y2,z ∈ path) when (y = y2) {(x,z)})
= (for (x,y ∈ dedge)
   let ... in for (y2,z ∈ path) let ... in when (y = y2) {(x,z)})
∪ for (x,y ∈ edge ∪ dedge) let ... in
    (for (y2,z ∈ dpath) let ... in when (y = y2) {(x,z)})
  ∪ (for (y2,z ∈ path ∪ dpath) let ... in
     δ(when (y=y2) {(x,z)}))
= (for (x,y ∈ dedge)
   let ... in for (y2,z ∈ path) let ... in when (y = y2) {(x,z)})
∪ for (x,y ∈ edge ∪ dedge) let ... in
    (for (y2,z ∈ dpath) let ... in when (y = y2) {(x,z)})
  ∪ (for (y2,z ∈ path ∪ dpath) let ... in
     if y=y2 then {} else
     when (false) {(x,z)} ∪ {}
= (for (x,y ∈ dedge) for (y2,z ∈ path) when (y = y2) {(x,z)})
∪ for (x,y ∈ edge ∪ dedge)
  for (y2,z ∈ dpath) when (y = y2) {(x,z)}
= (dedge • path) ∪ ((edge ∪ dedge) • dpath)
(because dedge is empty)
= edge • dpath

δ(when (M) N) = if φM then δN else when (δM) φN ∪ δN

δ(for (x in M) N)
= for (x in δM) let dx = 0 x in φN
∪ for (x in φM ∪ δM) let dx = 0 x in δN

φ(for (x in M) N) = for (x in φM) let dx = 0x in φN

4. δ(M ∩ N) ≡ (M ∩ δN) ∪ (δM ∩ N) ∪ (δM ∩ δN)
   if you optimize enough
